#include <iostream>
#include <Windows.h>
#include <conio.h>
#include <fstream>
#include "Map.h"
#include "Player.h"
#include "Display.h"

using namespace std;

/*	배열 구현부 : 지도를 만들어 봅시다. */
int Map::map[25][25] = {};
int Map::map1[25][25] = {
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
	{ 1,2,0,0,0,0,0,1,0,0,0,0,0,8,1,5,0,0,0,0,1,0,0,0,1 },
	{ 1,0,0,0,1,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,7,0,1 },
	{ 1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1 },
	{ 1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,7,0,0,1 },
	{ 1,0,0,1,0,0,6,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1 },
	{ 1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1 },
	{ 1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1 },
	{ 1,0,0,1,0,0,0,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,8,1 },
	{ 1,0,0,0,0,1,8,1,0,0,1,0,0,0,1,0,0,0,1,0,1,1,1,0,1 },
	{ 1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1 },
	{ 1,0,1,0,0,0,0,0,0,0,1,0,0,1,1,1,7,0,0,0,4,0,1,0,1 },
	{ 1,0,1,0,0,6,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1 },
	{ 1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,1 },
	{ 1,0,1,1,1,1,0,0,6,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,1 },
	{ 1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,1,0,1 },
	{ 1,0,0,0,1,0,1,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0,1,1,1 },
	{ 1,0,1,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1 },
	{ 1,8,1,0,1,0,1,0,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1 },
	{ 1,1,1,0,1,0,1,0,0,1,0,0,0,0,1,0,5,0,0,0,1,0,1,0,1 },
	{ 1,0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,8,1 },
	{ 1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,1,1,1 },
	{ 1,0,6,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,0,1,0,5,0,1 },
	{ 1,0,0,0,0,0,0,0,0,8,1,0,1,4,0,0,0,0,4,0,0,0,0,3,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 }
};
int Map::map2[25][25] = {
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
	{ 1,2,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,1 },
	{ 1,0,1,1,0,4,0,0,4,0,1,0,1,1,8,1,0,0,1,0,1,0,1,0,1 },
	{ 1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1 },
	{ 1,0,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,1,0,1 },
	{ 1,0,1,0,0,1,0,0,1,4,4,4,1,0,0,1,1,0,0,1,1,8,1,0,1 },
	{ 1,0,1,1,0,1,7,0,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,1 },
	{ 1,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,1 },
	{ 1,0,1,0,1,1,0,6,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1 },
	{ 1,0,0,0,8,1,0,0,1,0,0,1,1,0,0,1,1,0,0,1,1,5,0,0,1 },
	{ 1,1,1,1,1,1,7,0,1,7,0,1,0,0,1,8,0,0,0,5,1,0,0,4,1 },
	{ 1,0,0,0,0,1,0,0,1,0,0,1,0,1,1,1,1,1,0,0,1,0,1,1,1 },
	{ 1,0,0,4,0,0,0,4,1,0,0,1,0,1,8,0,0,1,1,0,1,0,0,0,1 },
	{ 1,0,0,1,1,1,1,1,1,0,6,1,0,1,1,1,0,1,0,0,1,4,0,0,1 },
	{ 1,0,0,1,5,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,7,0,1 },
	{ 1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,5,1,7,0,1 },
	{ 1,0,0,1,0,0,1,0,1,8,0,0,0,0,1,7,0,1,1,0,0,1,1,0,1 },
	{ 1,0,0,1,0,0,1,0,1,7,0,4,4,0,1,0,0,0,0,0,0,0,1,0,1 },
	{ 1,0,0,0,0,6,1,0,1,0,0,1,1,0,1,1,1,1,1,1,1,0,1,0,1 },
	{ 1,1,1,1,1,1,1,0,1,0,6,1,0,0,1,0,0,0,0,0,0,0,1,0,1 },
	{ 1,8,1,0,0,0,1,0,1,0,0,1,0,1,1,0,6,1,1,1,1,1,1,0,1 },
	{ 1,0,0,0,1,0,0,0,1,7,0,1,0,0,1,0,0,0,0,0,0,0,1,0,1 },
	{ 1,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,1,0,1 },
	{ 1,0,0,0,0,0,0,0,0,0,6,1,0,0,0,0,0,0,0,0,0,0,1,3,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 }
};
int Map::map3[25][25] = {
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
	{ 1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1,0,1,0,8,1 },
	{ 1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,6,1 },
	{ 1,0,0,0,0,0,0,1,8,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1 },
	{ 1,1,1,1,1,0,1,1,1,1,1,7,0,1,0,1,1,1,1,0,1,1,1,0,1 },
	{ 1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,6,1,0,1,0,0,0,1 },
	{ 1,0,4,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,4,0,1 },
	{ 1,0,1,1,1,0,0,0,1,0,0,0,5,0,1,0,0,0,0,0,1,0,1,0,1 },
	{ 1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,6,1,7,0,1,0,1,0,1 },
	{ 1,0,1,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1 },
	{ 1,0,1,8,1,4,1,0,0,0,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1 },
	{ 1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,1 },
	{ 1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,4,0,1,0,0,0,1,0,1 },
	{ 1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1 },
	{ 1,0,1,0,5,0,0,0,1,0,1,0,5,0,1,0,1,0,1,0,0,0,0,0,1 },
	{ 1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,4,0,4,0,1 },
	{ 1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1 },
	{ 1,0,1,0,1,0,8,1,0,0,0,0,0,0,0,0,1,8,1,0,0,0,1,0,1 },
	{ 1,0,1,0,1,1,1,1,0,6,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1 },
	{ 1,0,1,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1 },
	{ 1,0,1,0,1,7,0,1,0,1,0,1,7,0,1,0,1,1,1,1,1,1,1,0,1 },
	{ 1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,8,1,0,1 },
	{ 1,0,1,1,1,1,1,1,1,1,0,1,0,6,1,1,1,0,4,0,5,0,1,0,1 },
	{ 1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,3,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 }
};

int Map::mapNum=0;

/*지도 설정 : 프로그래밍의 시작은 변수 선언이죠!*/
void Map::SetMap(int stage) {
	//int n; //숫자를 임시로 저장할 변수
	//string url = "map"; //파일이름
	//switch (stage)
	//{
	//case 1:
	//	url += "1.txt";
	//	break;
	//case 2:
	//	url += "2.txt";
	//	break;
	//}

	//ifstream inFile;
	//inFile.open(url);
	///*if (inFile.is_open()) 
	//{
	//	cout << "file opne" << endl;
	//}*/
	//int i = 0;
	//int j = 0;
	//while (!inFile.eof())
	//{
	//	if (n = 10)
	//	{
	//		j = 0;
	//		i++;
	//	}
	//	if (n != 32)
	//	{
	//		map[i][j] = n;
	//		j++;
	//	}
	//	
	//	
	//}

	//inFile.close();
		//for (int i = 0; i < 25; i++)
		//{
		//	for (int j = 0; j < 25; j++)
		//	{
		//		n = inFile.get();
		//		if (n == ' ') continue;
		//		if (n == '\n') break;
		//		if(n>48&&n<57) Map::map[i][j] = n-48;
		//		
		//	}
		//}


	for (int i = 0; i < 25; i++)
	{
		for (int j = 0; j < 25; j++)
		{
			switch (stage)
			{
			case 1:
				map[i][j] = map1[i][j];
				mapNum=1;
				break;
			case 2:
			    map[i][j] = map2[i][j];
				mapNum=2;
				break;
			case 3:
				map[i][j] = map3[i][j];
				mapNum=3;
				break;
			}//스위치문 닫기
		}//for문 j 닫기
		
	}
	Player::plX = 1;
	Player::plY = 1;
}

/*내가 무얼 밟고 있는 거죠??*/
bool Map::MapChecker(int x, int y)
{
	int coordi;
	int &px = Player::plX;
	int &py = Player::plY;


	coordi = Map::map[x][y];
	switch (coordi)
	{
	case 0://공백
		map[x][y] = 2;
		map[px][py] = 0;
		px = x;
		py = y;
		break;
	case 1://벽
		break;
	case 2://플레이어
		break;
	case 3://별 출구
		map[x][y] = 2;
		map[px][py] = 0;
		px = x;
		py = y;
		return true;
		break;
	case 4:
	case 5:
	case 6:
	case 7://가시들
		Player::paincount++;
		Player::hp -= 1;
		/*아파하는 장면*/
		Display::ImPain();
		system("cls");
		map[x][y] = 2;
		map[px][py] = 0;
		px = x;
		py = y;
		break;
	case 8://클로버 아이템
		Player::hp += 1;
		map[x][y] = 2;
		map[px][py] = 0;
		px = x;
		py = y;
		break;
	}
	return false;
}

/*지도 그리기 : C++과 함께하는 미술 시간*/
void Map::DrawMap()
{
	int coordinates;
	COORD pos = { 0, 0 };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);

	for (int i = 0; i < 25; i++)
	{
		for (int j = 0; j < 25; j++)
		{
			coordinates = Map::map[i][j];
			switch (coordinates)
			{
			case 0:
				std::cout << "  ";
				break;
			case 1:
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
				std::cout << "■";
				break;
			case 2:
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
				std::cout << "◎";
				break;
			case 3:
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
				std::cout << "★";
				break;
			case 4:
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
				std::cout << "▲";
				break;
			case 5:
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
				std::cout << "▼";
				break;
			case 6:
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
				std::cout << "◀";
				break;
			case 7:
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
				std::cout << "▶";
				break;
			case 8:
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
				std::cout << "♣";
				break;
			}//switch
		}//for j
		std::cout << endl;
	}

}

